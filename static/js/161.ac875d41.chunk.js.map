{"version":3,"file":"static/js/161.ac875d41.chunk.js","mappings":"sPAOAA,OAAOC,WAAaC,cAOpB,MAAMC,EAAW,CACbC,IAAK,yBAA0BC,IAAK,iEAGlCC,GAAoBC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACnBJ,GAAQ,IAAEK,OAAQ,kBAAmBC,eAAgB,WAG5DC,EAAAA,EAAAA,QAAmB,CACfC,QAAS,CACLC,QAASN,EAAsB,kBAAmBA,EAAsB,uBAAqBC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACtFJ,GAAQ,IAAEK,OAAQ,sBAAuBC,eAAgB,UAC7D,cAEFF,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACMJ,GAAQ,IAAEK,OAAQ,aAAcC,eAAgBP,aAKxD,MAAMW,EAAO,MAChB,MAAMC,EAAWC,IAAAA,OAAa,CAC1BC,eAAgB,WACZ,OAAO,CACX,IAGJ,OAAQC,GACAA,EAAOC,eAAe,WAAsC,oBAAlBD,EAAOE,OAC1CC,QAAQC,QAAQJ,EAAOE,OAAOG,IAAKL,EAAQ,CAAC,aAAaM,MAAMC,IAAI,CACtEA,KAAM,CACFC,KAAM,EAAGD,YAEbE,OAAOC,IACPC,EAAAA,QAAQC,MAAMF,EAAIC,SAAW,wCACtB,CAACJ,KAAM,CAACC,KAAM,IAAKK,IAAKH,EAAIC,aAGpCd,EAASG,EAEvB,EApBmB,IAuBpBc,EAAAA,EAAAA,QAAY,CACRlB,OACAmB,SAASC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACC,MAAO,IACPC,MAAO,CAACC,SAAU,WAAYC,KAAM,MAAOC,QAAS,OAAQC,UAAW,sBACtFX,MAAO,KACPY,OAAOR,EAAAA,EAAAA,KAACS,EAAAA,MAAK,IACbC,kBAAoBC,IAChB,MAAM,KAACpB,GAAQoB,EAIf,OAHAA,EAASpB,KAAO,CACZC,KAAoB,IAAdD,EAAKC,KAAa,IAAMD,EAAKC,KAAMK,IAAKN,EAAKM,IAAKe,QAASrB,EAAKA,MAEnEoB,K,yGC/DTE,EAAgBC,IAAAA,cAuBtB,EArBYC,IAAuC,IAAtC,OAAEC,EAAM,WAAEC,GAAsBF,EAAPG,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GACzC,OACIpB,EAAAA,EAAAA,KAACqB,EAAAA,WAAU,CAAAC,UACTtB,EAAAA,EAAAA,KAACa,GAAavC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACN4C,GAAK,IACTK,MAAO,CACL,CACEC,IAAK,aACLC,KAAM,IACNC,MAAO,iBAGXV,OAAQA,EACRC,WAAYA,EACZU,OAAQA,EAAAA,QACRC,UAAW,CAAEC,KAAM,YCjBlBC,EAAAA,WAAoBC,SAASC,eAAe,SAMpDC,QACDjC,EAAAA,EAAAA,KAACkC,IAAAA,WAAgB,CAAAZ,UACftB,EAAAA,EAAAA,KAACmC,EAAG,CAACnB,OAAQ,CAAEpC,KAAK,GAAGqC,WANV,CACjBmB,aAAc,e,0DCNhB,MA0uBA,EA1uBqB,CACjBC,KAAM,aACNC,QAAS,07KA4ITC,YAAa,yGACbC,YAAa,kBACbC,IAAK,gsYA2hBLC,QAAS,CACLC,QAAQ,EACRC,UAAW,mBACXzC,MAAO,mGAKP0C,KAAM,CAAC,CACXnB,MAAO,mDACPa,YAAa,mDACb/C,KAAM,+4BAuCNsD,MAAO,CAAC,CACRT,KAAM,aACNG,YAAa,8BACbO,gBAAiB,gDACjBC,UAAW,GACb,CACEX,KAAM,OACNG,YAAa,OACbQ,UAAW,O","sources":["preset.js","App.js","bootstrap.js","../../README.md"],"sourcesContent":["import React from 'react';\nimport {preset as fetchPreset} from '@kne/react-fetch';\nimport {Spin, Empty, message} from 'antd';\nimport axios from 'axios';\nimport {preset as remoteLoaderPreset} from '@kne/remote-loader';\nimport omit from 'lodash/omit';\n\nwindow.PUBLIC_URL = process.env.PUBLIC_URL;\n\n// url: 'https://registry.npmmirror.com',\n// tpl: '{{url}}/@kne-components%2f{{remote}}/{{version}}/files/build',\n\n// url: 'https://cdn.jsdelivr.net', tpl: '{{url}}/npm/@kne-components/{{remote}}@{{version}}/build'\n\nconst registry = {\n    url: \"https://uc.fatalent.cn\", tpl: \"{{url}}/packages/@kne-components/{{remote}}/{{version}}/build\"\n};\n\nconst componentsCoreRemote = {\n    ...registry, remote: 'components-core', defaultVersion: '0.3.0'\n};\n\nremoteLoaderPreset({\n    remotes: {\n        default: componentsCoreRemote, 'components-core': componentsCoreRemote, 'components-iconfont': {\n            ...registry, remote: 'components-iconfont', defaultVersion: '0.1.8'\n        }, 'react-intl': process.env.NODE_ENV === 'development' ? {\n            remote: 'react-intl', url: '/', tpl: '{{url}}'\n        } : {\n            ...registry, remote: 'react-intl', defaultVersion: process.env.DEFAULT_VERSION\n        }\n    }\n});\n\nexport const ajax = (() => {\n    const instance = axios.create({\n        validateStatus: function () {\n            return true;\n        }\n    });\n\n    return (params) => {\n        if (params.hasOwnProperty('loader') && typeof params.loader === 'function') {\n            return Promise.resolve(params.loader(omit(params, ['loader']))).then((data) => ({\n                data: {\n                    code: 0, data\n                }\n            })).catch((err) => {\n                message.error(err.message || '请求发生错误');\n                return {data: {code: 500, msg: err.message}};\n            });\n        }\n        return instance(params);\n    };\n})();\n\n\nfetchPreset({\n    ajax,\n    loading: <Spin delay={500}\n                   style={{position: 'absolute', left: '50%', padding: '10px', transform: 'translateX(-50%)'}}/>,\n    error: null,\n    empty: <Empty/>,\n    transformResponse: (response) => {\n        const {data} = response;\n        response.data = {\n            code: data.code === 0 ? 200 : data.code, msg: data.msg, results: data.data\n        };\n        return response;\n    }\n});\n","import { HashRouter } from \"react-router-dom\";\nimport createEntry from \"@kne/modules-dev/dist/create-entry\";\nimport \"@kne/modules-dev/dist/create-entry.css\";\nimport readme from \"readme\";\n\nconst ExampleRoutes = createEntry.ExampleRoutes;\n\nconst App = ({ preset, themeToken, ...props }) => {\n  return (\n      <HashRouter>\n        <ExampleRoutes\n            {...props}\n            paths={[\n              {\n                key: \"components\",\n                path: \"/\",\n                title: \"首页\",\n              },\n            ]}\n            preset={preset}\n            themeToken={themeToken}\n            readme={readme}\n            pageProps={{ menu: null }}\n        />\n      </HashRouter>\n  );\n};\n\nexport default App;\n","import { ajax } from \"./preset\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\n\nconst themeToken = {\n  colorPrimary: \"#4F185A\",\n};\n\nroot.render(\n    <React.StrictMode>\n      <App preset={{ ajax }} themeToken={themeToken} />\n    </React.StrictMode>\n);\n","import * as component_1 from '@kne/current-lib_react-intl';\nimport * as component_2 from 'antd';\nconst readmeConfig = {\n    name: `react-intl`,\n    summary: `<p>@kne/react-intl是一个基于<a href=\"https://formatjs.io/docs/react-intl/\">react-intl</a>的React国际化封装组件库，提供了更简便的API和更灵活的使用方式。它与@kne/global-context深度集成，支持从上下文获取语言设置，并提供了命名空间支持，使得国际化资源的管理更加方便。</p>\n<h3>主要特性</h3>\n<ul>\n<li><strong>简化的API</strong>：封装react-intl，提供更简洁直观的API</li>\n<li><strong>命名空间支持</strong>：支持通过命名空间隔离和组织国际化消息</li>\n<li><strong>上下文集成</strong>：与@kne/global-context无缝集成，支持从上下文获取locale</li>\n<li><strong>灵活的Provider</strong>：支持多种方式创建和使用国际化Provider</li>\n<li><strong>动态消息加载</strong>：支持运行时动态加载和更新国际化消息</li>\n<li><strong>函数式组件支持</strong>：支持将intl实例作为render props传递</li>\n</ul>\n<h3>安装</h3>\n<pre><code class=\"language-bash\">npm install @kne/react-intl\n</code></pre>\n<h3>基本使用</h3>\n<h4>1. 使用createIntlProvider创建Provider</h4>\n<pre><code class=\"language-jsx\">import {createIntlProvider} from '@kne/react-intl';\n\n// 方式1：使用对象配置\nconst IntlProvider = createIntlProvider({\n  defaultLocale: 'zh-CN',\n  messages: {\n    'zh-CN': {\n      hello: '你好，世界！'\n    },\n    'en-US': {\n      hello: 'Hello, world!'\n    }\n  },\n  namespace: 'app'\n});\n\n// 方式2：使用参数配置\nconst IntlProvider = createIntlProvider('zh-CN', {\n  hello: '你好，世界！'\n}, 'app');\n\n// 在应用中使用\nconst App = () =&gt; (\n  &lt;IntlProvider&gt;\n    &lt;YourApp /&gt;\n  &lt;/IntlProvider&gt;\n);\n\n// 使用render props获取intl实例\nconst App = () =&gt; (\n  &lt;IntlProvider&gt;\n    {(intl) =&gt; (\n      &lt;div&gt;{intl.formatMessage({id: 'hello'})}&lt;/div&gt;\n    )}\n  &lt;/IntlProvider&gt;\n);\n</code></pre>\n<h4>2. 使用createWithIntlProvider创建高阶组件</h4>\n<pre><code class=\"language-jsx\">import {createWithIntlProvider} from '@kne/react-intl';\n\nconst withIntl = createWithIntlProvider({\n  defaultLocale: 'zh-CN',\n  defaultMessage: {\n    hello: '你好，世界！'\n  },\n  namespace: 'app'\n});\n\n// 包装组件\nconst WrappedComponent = withIntl(YourComponent);\n</code></pre>\n<h4>3. 动态加载国际化消息</h4>\n<pre><code class=\"language-jsx\">import {localeLoader, messagesLoader} from '@kne/react-intl';\n\n// 加载单个语言的消息\nlocaleLoader('zh-CN', {\n  welcome: '欢迎使用'\n}, 'app');\n\n// 批量加载多个语言的消息\nmessagesLoader({\n  'zh-CN': {\n    welcome: '欢迎使用'\n  },\n  'en-US': {\n    welcome: 'Welcome'\n  }\n}, 'app');\n</code></pre>\n<h4>4. 与@kne/global-context集成</h4>\n<pre><code class=\"language-jsx\">import {createIntlProvider} from '@kne/react-intl';\nimport {createContext} from '@kne/global-context';\n\nconst {useContext, ContextProvider} = createContext();\n\nconst IntlProvider = createIntlProvider({\n  defaultLocale: 'zh-CN',\n  messages: {\n    'zh-CN': {\n      hello: '你好'\n    }\n  }\n});\n\n// locale将从context中获取\nconst App = () =&gt; (\n  &lt;ContextProvider value={{locale: 'zh-CN'}}&gt;\n    &lt;IntlProvider&gt;\n      &lt;YourApp /&gt;\n    &lt;/IntlProvider&gt;\n  &lt;/ContextProvider&gt;\n);\n</code></pre>\n<h3>最佳实践</h3>\n<ol>\n<li>\n<p><strong>使用命名空间</strong>：</p>\n<ul>\n<li>为不同模块使用不同的命名空间，避免消息键冲突</li>\n<li>保持命名空间结构清晰，便于管理</li>\n</ul>\n</li>\n<li>\n<p><strong>动态加载</strong>：</p>\n<ul>\n<li>按需加载国际化消息，减少初始加载大小</li>\n<li>使用messagesLoader批量加载相关消息</li>\n</ul>\n</li>\n<li>\n<p><strong>上下文集成</strong>：</p>\n<ul>\n<li>优先使用上下文管理locale</li>\n<li>在需要时才通过props覆盖locale</li>\n</ul>\n</li>\n<li>\n<p><strong>消息组织</strong>：</p>\n<ul>\n<li>使用有意义的消息键</li>\n<li>保持消息结构扁平化</li>\n<li>适当使用消息格式化功能</li>\n</ul>\n</li>\n</ol>`,\n    description: `快捷地创建国际化中需要使用到的组件`,\n    packageName: `@kne/react-intl`,\n    api: `<p>本文档详细介绍了@kne/react-intl提供的API，包括函数、组件和钩子。</p>\n<h3>核心API</h3>\n<h4>createIntl</h4>\n<p>创建国际化相关的组件和hooks，可以自定义获取locale的方法。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>配置选项</td>\n</tr>\n<tr>\n<td>options.getLocale</td>\n<td>Function</td>\n<td>否</td>\n<td>从context获取</td>\n<td>自定义获取locale的函数</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntlProvider</td>\n<td>Component</td>\n<td>国际化Provider组件</td>\n</tr>\n<tr>\n<td>useIntl</td>\n<td>Hook</td>\n<td>获取intl对象的hook</td>\n</tr>\n<tr>\n<td>FormattedDate</td>\n<td>Component</td>\n<td>格式化日期组件</td>\n</tr>\n<tr>\n<td>FormattedTime</td>\n<td>Component</td>\n<td>格式化时间组件</td>\n</tr>\n<tr>\n<td>FormattedNumber</td>\n<td>Component</td>\n<td>格式化数字组件</td>\n</tr>\n<tr>\n<td>FormattedPlural</td>\n<td>Component</td>\n<td>格式化复数组件</td>\n</tr>\n<tr>\n<td>FormattedMessage</td>\n<td>Component</td>\n<td>格式化消息组件</td>\n</tr>\n<tr>\n<td>FormattedHTMLMessage</td>\n<td>Component</td>\n<td>格式化HTML消息组件</td>\n</tr>\n<tr>\n<td>FormattedRelativeTime</td>\n<td>Component</td>\n<td>格式化相对时间组件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-jsx\">import {createIntl} from '@kne/react-intl';\nimport {createContext} from '@kne/global-context';\n\nconst {useContext} = createContext();\n\nconst {IntlProvider, useIntl, FormattedMessage} = createIntl({\n  getLocale: () =&gt; {\n    const [context] = useContext();\n    return context.locale;\n  }\n});\n</code></pre>\n<h4>createIntlProvider</h4>\n<p>创建国际化Provider组件，支持多种调用方式。</p>\n<p><strong>方式1：使用对象配置</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>是</td>\n<td>-</td>\n<td>Provider的配置选项</td>\n</tr>\n<tr>\n<td>options.locale</td>\n<td>String</td>\n<td>否</td>\n<td>从context获取</td>\n<td>当前语言</td>\n</tr>\n<tr>\n<td>options.defaultLocale</td>\n<td>String</td>\n<td>否</td>\n<td>'zh-CN'</td>\n<td>默认语言</td>\n</tr>\n<tr>\n<td>options.messages</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>国际化消息对象</td>\n</tr>\n<tr>\n<td>options.namespace</td>\n<td>String</td>\n<td>否</td>\n<td>'global'</td>\n<td>命名空间</td>\n</tr>\n</tbody>\n</table>\n<p><strong>方式2：使用参数配置</strong></p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>locale</td>\n<td>String</td>\n<td>是</td>\n<td>-</td>\n<td>当前语言</td>\n</tr>\n<tr>\n<td>messages</td>\n<td>Object</td>\n<td>是</td>\n<td>-</td>\n<td>国际化消息对象</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>String</td>\n<td>否</td>\n<td>'global'</td>\n<td>命名空间</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Component</td>\n<td>国际化Provider组件，支持render props获取intl实例</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-jsx\">// 方式1：使用对象配置\nimport {createIntlProvider} from '@kne/react-intl';\n\nconst IntlProvider = createIntlProvider({\n  defaultLocale: 'zh-CN',\n  messages: {\n    'zh-CN': {\n      hello: '你好，世界！'\n    },\n    'en-US': {\n      hello: 'Hello, world!'\n    }\n  },\n  namespace: 'app'\n});\n\n// 方式2：使用参数配置\nconst IntlProvider = createIntlProvider('zh-CN', {\n  hello: '你好，世界！'\n}, 'app');\n\n// 在应用中使用\nconst App = () =&gt; (\n  &lt;IntlProvider&gt;\n    &lt;YourApp /&gt;\n  &lt;/IntlProvider&gt;\n);\n\n// 使用render props获取intl实例\nconst App = () =&gt; (\n  &lt;IntlProvider&gt;\n    {(intl) =&gt; (\n      &lt;div&gt;{intl.formatMessage({id: 'hello'})}&lt;/div&gt;\n    )}\n  &lt;/IntlProvider&gt;\n);\n</code></pre>\n<h4>createWithIntlProvider</h4>\n<p>创建一个高阶组件，用于包装组件并提供国际化功能。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>options</td>\n<td>Object</td>\n<td>是</td>\n<td>-</td>\n<td>Provider的配置选项</td>\n</tr>\n<tr>\n<td>options.locale</td>\n<td>String</td>\n<td>否</td>\n<td>从context获取</td>\n<td>当前语言</td>\n</tr>\n<tr>\n<td>options.defaultLocale</td>\n<td>String</td>\n<td>否</td>\n<td>'zh-CN'</td>\n<td>默认语言</td>\n</tr>\n<tr>\n<td>options.defaultMessage</td>\n<td>Object</td>\n<td>否</td>\n<td>{}</td>\n<td>默认消息对象</td>\n</tr>\n<tr>\n<td>options.namespace</td>\n<td>String</td>\n<td>否</td>\n<td>'global'</td>\n<td>命名空间</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Function</td>\n<td>高阶组件函数，接收一个组件并返回包装后的组件</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-jsx\">import {createWithIntlProvider} from '@kne/react-intl';\n\nconst withIntl = createWithIntlProvider({\n  defaultLocale: 'zh-CN',\n  defaultMessage: {\n    hello: '你好，世界！'\n  },\n  namespace: 'app'\n});\n\n// 包装组件\nconst WrappedComponent = withIntl(YourComponent);\n\n// 使用包装后的组件\nconst App = () =&gt; &lt;WrappedComponent /&gt;;\n</code></pre>\n<h4>localeLoader</h4>\n<p>加载单个语言的国际化消息。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>locale</td>\n<td>String</td>\n<td>是</td>\n<td>-</td>\n<td>语言代码</td>\n</tr>\n<tr>\n<td>localeMessage</td>\n<td>Object</td>\n<td>是</td>\n<td>-</td>\n<td>消息对象</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>String</td>\n<td>否</td>\n<td>'global'</td>\n<td>命名空间</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Object</td>\n<td>更新后的完整消息对象</td>\n</tr>\n</tbody>\n</table>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-jsx\">import {localeLoader} from '@kne/react-intl';\n\n// 加载中文消息\nlocaleLoader('zh-CN', {\n  welcome: '欢迎使用我们的应用'\n}, 'app');\n\n// 加载英文消息\nlocaleLoader('en-US', {\n  welcome: 'Welcome to our application'\n}, 'app');\n</code></pre>\n<h4>messagesLoader</h4>\n<p>批量加载多语言的国际化消息。</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>类型</th>\n<th>必填</th>\n<th>默认值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>messages</td>\n<td>Object</td>\n<td>是</td>\n<td>-</td>\n<td>多语言消息对象，格式为 {locale: messages}</td>\n</tr>\n<tr>\n<td>namespace</td>\n<td>String</td>\n<td>否</td>\n<td>'global'</td>\n<td>命名空间</td>\n</tr>\n</tbody>\n</table>\n<p><strong>返回值</strong>：无</p>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-jsx\">import {messagesLoader} from '@kne/react-intl';\n\n// 批量加载多语言消息\nmessagesLoader({\n  'zh-CN': {\n    welcome: '欢迎使用',\n    goodbye: '再见'\n  },\n  'en-US': {\n    welcome: 'Welcome',\n    goodbye: 'Goodbye'\n  }\n}, 'app');\n</code></pre>\n<h3>从react-intl导出的API</h3>\n<p>以下API直接从react-intl导出，详细用法请参考<a href=\"https://formatjs.io/docs/react-intl/\">react-intl官方文档</a>。</p>\n<table>\n<thead>\n<tr>\n<th>API</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IntlProvider</td>\n<td>Component</td>\n<td>国际化Provider组件</td>\n</tr>\n<tr>\n<td>FormattedDate</td>\n<td>Component</td>\n<td>格式化日期组件</td>\n</tr>\n<tr>\n<td>FormattedTime</td>\n<td>Component</td>\n<td>格式化时间组件</td>\n</tr>\n<tr>\n<td>FormattedNumber</td>\n<td>Component</td>\n<td>格式化数字组件</td>\n</tr>\n<tr>\n<td>FormattedPlural</td>\n<td>Component</td>\n<td>格式化复数组件</td>\n</tr>\n<tr>\n<td>FormattedMessage</td>\n<td>Component</td>\n<td>格式化消息组件</td>\n</tr>\n<tr>\n<td>FormattedHTMLMessage</td>\n<td>Component</td>\n<td>格式化HTML消息组件</td>\n</tr>\n<tr>\n<td>FormattedRelativeTime</td>\n<td>Component</td>\n<td>格式化相对时间组件</td>\n</tr>\n<tr>\n<td>useIntl</td>\n<td>Hook</td>\n<td>获取intl对象的hook</td>\n</tr>\n<tr>\n<td>injectIntl</td>\n<td>HOC</td>\n<td>注入intl对象的高阶组件</td>\n</tr>\n<tr>\n<td>defineMessages</td>\n<td>Function</td>\n<td>定义消息的辅助函数</td>\n</tr>\n<tr>\n<td>createIntl</td>\n<td>Function</td>\n<td>创建intl对象的函数</td>\n</tr>\n</tbody>\n</table>\n<h3>内部API</h3>\n<h4>message</h4>\n<p>存储所有已加载的国际化消息的对象。</p>\n<p><strong>结构</strong>：</p>\n<pre><code class=\"language-javascript\">{\n  [locale: string]: {\n    [namespace: string]: {\n      [messageId: string]: string\n    }\n  }\n}\n</code></pre>\n<p><strong>示例</strong>：</p>\n<pre><code class=\"language-javascript\">// 内部结构示例\n{\n  'zh-CN': {\n    'global': {\n      'hello': '你好'\n    },\n    'app': {\n      'welcome': '欢迎使用'\n    }\n  },\n  'en-US': {\n    'global': {\n      'hello': 'Hello'\n    },\n    'app': {\n      'welcome': 'Welcome'\n    }\n  }\n}\n</code></pre>\n<p><strong>注意</strong>：此对象通常不需要直接访问，应通过提供的API函数进行操作。</p>\n<h3></h3>`,\n    example: {\n        isFull: false,\n        className: `react_intl_f9868`,\n        style: `.react_intl_f9868 .ant-card {\n  border-color: black;\n  text-align: center;\n  width: 200px;\n}`,\n        list: [{\n    title: `这里填写示例标题`,\n    description: `这里填写示例说明`,\n    code: `const { createIntlProvider, FormattedMessage } = _ReactIntl;\nconst { Select, Flex } = antd;\nconst { useState } = React;\n\nconst IntlProvider = createIntlProvider({\n  defaultLocale: 'zh-CN',\n  messages: {\n    'zh-CN': {\n      hello: '你好，世界！'\n    },\n    'en-US': {\n      hello: 'Hello, world!'\n    }\n  }\n});\n\nconst BaseExample = () => {\n  const [locale, setLocale] = useState('zh-CN');\n  return (\n    <IntlProvider locale={locale}>\n      <Flex gap={10}>\n        <Select\n          placeholder=\"请选择语言\"\n          value={locale}\n          onChange={setLocale}\n          options={[\n            { value: 'zh-CN', label: '中文' },\n            { value: 'en-US', label: 'English' }\n          ]}\n        />\n        <FormattedMessage id=\"hello\" />\n      </Flex>\n    </IntlProvider>\n  );\n};\n\nrender(<BaseExample />);\n\n`,\n    scope: [{\n    name: \"_ReactIntl\",\n    packageName: \"@kne/current-lib_react-intl\",\n    importStatement: \"import * as _ReactIntl from \\\"@kne/react-intl\\\"\",\n    component: component_1\n},{\n    name: \"antd\",\n    packageName: \"antd\",\n    component: component_2\n}]\n}]\n    }\n};\nexport default readmeConfig;\n"],"names":["window","PUBLIC_URL","process","registry","url","tpl","componentsCoreRemote","_objectSpread","remote","defaultVersion","remoteLoaderPreset","remotes","default","ajax","instance","axios","validateStatus","params","hasOwnProperty","loader","Promise","resolve","omit","then","data","code","catch","err","message","error","msg","fetchPreset","loading","_jsx","Spin","delay","style","position","left","padding","transform","empty","Empty","transformResponse","response","results","ExampleRoutes","createEntry","_ref","preset","themeToken","props","_objectWithoutProperties","_excluded","HashRouter","children","paths","key","path","title","readme","pageProps","menu","ReactDOM","document","getElementById","render","React","App","colorPrimary","name","summary","description","packageName","api","example","isFull","className","list","scope","importStatement","component"],"sourceRoot":""}